var argv = require('yargs').argv;
var del = require('del');
var gulp = require('gulp');
var gulpif = require('gulp-if');
var uglify = require('gulp-uglify');
var plumber = require('gulp-plumber');
var postcss = require('gulp-postcss');
var rename = require("gulp-rename");
var replace = require('gulp-replace');
var sass = require('gulp-sass');
var sassGlob = require('gulp-sass-glob');
var sourcemaps = require('gulp-sourcemaps');

// PostCSS processors.
var autoprefixer = require('autoprefixer');
var clean = require('postcss-clean');
var flexibility = require('postcss-flexibility');
var mqpacker = require('css-mqpacker');
var processors = [
  autoprefixer({browsers: ["last 2 version", "> 5%", "IE 11"]}),
  mqpacker({sort: true}),
  flexibility()
];
if (!argv.development) {
  processors.push(clean());
}

// SASS parameters.
var sassParams = {
  outputStyle: 'compressed'
};
if (argv.development) {
  sassParams.outputStyle = 'expanded';
}


// Clean compiled files..
gulp.task('clean', function(){
  return del([
    'dist/css/**/*',
    '!dist/css/.gitkeep',
    'dist/fonts/**/*',
    '!dist/fonts/.gitkeep',
    'dist/images/**/*',
    '!dist/images/.gitkeep',
    'dist/js/**/*',
    '!dist/js/.gitkeep'
  ])
});


// Compile styles.
gulp.task('styles:global', function(){
  return gulp.src('assets-src/sass/*.scss')
    .pipe(plumber())
    .pipe(gulpif(argv.development, sourcemaps.init()))
    .pipe(sassGlob())
    .pipe(sass(sassParams))
    .pipe(replace('@root', '../..'))
    .pipe(postcss(processors))
    .pipe(gulpif(argv.development, sourcemaps.write('.')))
    .pipe(gulp.dest('dist/css'))
});
gulp.task('styles:patterns', function(){
  return gulp.src('templates/**/*.scss')
    .pipe(plumber())
    .pipe(gulpif(argv.development, sourcemaps.init()))
    .pipe(replace('@global', '../../../../assets-src/sass'))
    .pipe(sassGlob())
    .pipe(sass(sassParams))
    .pipe(replace('@root', '../../../..'))
    .pipe(postcss(processors))
    .pipe(gulpif(argv.development, sourcemaps.write('.')))
    .pipe(gulp.dest('templates'))
});
gulp.task('styles', gulp.parallel('styles:global', 'styles:patterns'));


// Compile scripts.
gulp.task('scripts:global', function(){
  return gulp.src('assets-src/js/*.js')
    .pipe(plumber())
    .pipe(gulpif(!argv.development, uglify()))
    .pipe(rename({suffix: '.min'}))
    .pipe(gulp.dest('dist/js'))
});
gulp.task('scripts:patterns', function(){
  return gulp.src(['templates/**/*.js', '!templates/**/*.min.js'])
    .pipe(plumber())
    .pipe(gulpif(!argv.development, uglify()))
    .pipe(rename({suffix: '.min'}))
    .pipe(gulp.dest('templates'))
});
gulp.task('scripts', gulp.parallel('scripts:global', 'scripts:patterns'));


// Compile images.
gulp.task('images:global', function(){
  return gulp.src('assets-src/images/**/*')
    // TODO Lossless compression.
    .pipe(gulp.dest('dist/images'))
});
gulp.task('images', gulp.parallel('images:global'));


// Compile fonts.
gulp.task('fonts:global', function(){
  return gulp.src('assets-src/fonts/**/*')
    // TODO Lossless compression.
    .pipe(gulp.dest('dist/fonts'))
});
gulp.task('fonts', gulp.parallel('fonts:global'));


// Default actions.
gulp.task('build', gulp.series('clean', gulp.parallel('styles', 'scripts', 'images', 'fonts')));
gulp.task('default', gulp.task('build'));


// Watcher.
gulp.task('do-watch', function(){
  gulp.watch(['**/*.js', '!**/*.min.js', '!gulpfile.js'], gulp.task('scripts'));
  gulp.watch(['templates/**/*.scss', 'assets-src/sass/variables/*.scss', 'assets-src/sass/abstractions/*.scss'], gulp.task('styles:patterns'));
  return gulp.watch('assets-src/sass/**/*.scss', gulp.task('styles:global'));
});
gulp.task('watch', gulp.series('build', 'do-watch'));
